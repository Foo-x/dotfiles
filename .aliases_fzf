# use in your .bash_profile or .bashrc like below
# . /path/to/dotfiles/.aliases_fzf

# cdh - cd from history
function cdh() {
  local target=$(dirs -v | sort -k 2 | uniq -f 1 | sort -n -k 1 | cut -d" " -f3- | sed 's/^ *//' | fzf --bind "shift-up:page-up,shift-down:page-down")

  if [ -n "$target" ]; then
    cd "$(echo "$target" | sed "s;^~;$HOME;")"
  fi
}

# fd - cd to selected directory
# sort by depth
function fd() {
  local dir maxdepth ignore_ptn='.git|node_modules'
  [[ "$1" =~ ^[0-9]+$ ]] && maxdepth="-maxdepth $1"

  dir=$(
    find . "$1" -type d -printf "%d %p\n" 2> /dev/null |
    sed "1d" |
    \grep -Ev "${ignore_ptn}" |
    sort -n |
    cut -d" " -f2- |
    sed "s|^./||" |
    fzf +m +s --preview '
        __cd_nxt="$(echo {})";
        __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
        echo $__cd_path;
        echo;
        ls -p --group-directories-first --color=always "${__cd_path}";'
  ) && cd "$dir"
}

# fe - open the selected files
# open with command of EDITOR variable
function fe() {
  local files maxdepth ignore_ptn='.git|node_modules'
  [[ "$1" =~ ^[0-9]+$ ]] && maxdepth="-maxdepth $1"

  files=($(
    find . "$1" -type f -printf "%d %p\n" 2> /dev/null |
    sed "1d" |
    \grep -Ev "${ignore_ptn}" |
    sort -n |
    cut -d" " -f2- |
    sed "s|^./||" |
    fzf -m +s --header "Tab: toggle"
  ))
  if [[ -n "$files" ]]; then
    local files_str="$(printf '"%s" ' "${files[@]}")"
    eval "${EDITOR:-vim -p} ${files_str}"
  fi
}

# fh - repeat history
function fh() {
  local command=$( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | sort -k 2 -k 1rn | uniq -f 1 | sort -n | fzf --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
  history -s "${command}"
  history -s "${FUNCNAME[0]}"
  eval "${command}"
}

# gfco - checkout branch
function gfco() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)") || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") | sed '/^$/d' |
    fzf --no-hscroll --no-multi -n 2 --header="current: [$(git symbolic-ref --short HEAD 2> /dev/null || echo 'detached HEAD')]" \
        --ansi --preview="git --no-pager log -150 --color --pretty=format:\"%s %C(black)%C(bold)%cr%C(reset)\" ..{2}") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# gfshow - show commit
# can specify file
function gfshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index \
      --preview "echo {} | bash -c \"\grep -Eo '[a-f0-9]+' | head -1 |
                xargs -I % git diff-tree --no-commit-id --name-status -r %\"" \
      --bind "ctrl-m:execute:
                (echo {} | bash -c \"\grep -Eo '[a-f0-9]+' | head -1 |
                xargs -I % bash -c 'export TERM=xterm; git show --color=always % | less -R'\")"
}

# gfa - add selected
function gfa() {
  local selected
  selected=$(git -c color.status=always status -s |
    fzf -m --ansi --preview "echo {2} | xargs git diff --color" |
    awk '{print $2}')

  if [[ "${selected}" ]]; then
    echo "${selected}" | xargs git add
    echo "Completed: git add $(echo ${selected})"
  fi
}

# gfus - unstage selected
function gfus() {
  local selected
  selected=$(git -c color.status=always status -s |
    fzf -m --ansi --preview "echo {2} | xargs git diff --color" |
    awk '{print $2}')

  if [[ "${selected}" ]]; then
    echo "${selected}" | xargs git reset -q HEAD
    echo "Completed: git unstage $(echo ${selected})"
  fi
}
