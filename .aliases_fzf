# use in your .bash_profile or .bashrc like below
# . /path/to/dotfiles/.aliases_fzf

# __bfs_dir - breadth-first search for directories
function __bfs_dir() {
  local ignore_ptn="\.git|node_modules"

  python -c "
import os
import re
from collections import deque

pattern = re.compile('${ignore_ptn}')

q = deque([c for c in os.listdir('.') if os.path.isdir(c) and not pattern.match(c)])

while len(q) > 0:
    p = q.popleft()
    print(p)
    for c in os.listdir(p):
        if pattern.match(c):
            continue
        child_path = p + '/' + c
        if os.path.isdir(child_path):
            q.append(child_path)
  "
}

# __bfs_file - breadth-first search for files
function __bfs_file() {
  local ignore_ptn="\.git|node_modules"

  python -c "
import os
import re
from collections import deque

pattern = re.compile('${ignore_ptn}')

q = deque([c for c in os.listdir('.') if os.path.isdir(c) and not pattern.match(c)])

while len(q) > 0:
    p = q.popleft()
    for c in os.listdir(p):
        if pattern.match(c):
            continue
        child_path = p + '/' + c
        if os.path.isdir(child_path):
            q.append(child_path)
        if os.path.isfile(child_path):
            print(child_path)
  "
}

# f- - cd from history
function f-() {
  local target=$(dirs -v | sort -k 2 | uniq -f 1 | sort -n -k 1 | tail -n +2 | awk '{print $2}' | fzf)

  if [ -n "$target" ]; then
    cd "$(echo "$target" | sed "s;^~;$HOME;")"
  fi
}

# f.. - cd parent directory
function f..() {
  local paths=$(cd .. && pwd | tr "/" "\n") null="/dev/null"
  [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]] && null="nul"

  local selected="$(
    (
    for i in $(seq 1 $(echo "${paths}" | wc -l)); do
      echo "${paths}" | head -n $i | tr "\n" "/"
      echo
    done
    ) | sed '1!G;h;$!d' | fzf --preview "ls -p --group-directories-first --color=always {} 2> ${null}")"

  if [[ "$selected" ]]; then
    cd "${selected}"
  fi
}

# fd - cd to selected directory
# sort by depth
function fd() {
  local dir query
  [[ -n "$1" ]] && query="-q $1"

  dir=$(
    __bfs_dir |
    fzf +m +s ${query} --preview '
        __cd_nxt="$(echo {})";
        __cd_path="$(echo $(pwd)/${__cd_nxt} | sed "s;//;/;")";
        echo $__cd_path;
        echo;
        ls -p --group-directories-first --color=always "${__cd_path}";'
  ) && cd "$dir"
}

# fe - open the selected files
# open with command of EDITOR variable
function fe() {
  local files query
  [[ -n "$1" ]] && query="-q $1"

  files=($(
    __bfs_file |
    fzf -m ${query} --header "Tab: toggle"
  ))
  if [[ -n "$files" ]]; then
    local files_str="$(printf '"%s" ' "${files[@]}")"
    eval "${EDITOR:-vim -p} ${files_str}"
  fi
}

# fh - repeat history
function fh() {
  local command=$( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | sort -k 2 -k 1rn | uniq -f 1 | sort -n | fzf --tac | sed -r 's/ *[0-9]*\*? *//' | sed -r 's/\\/\\\\/g')
  history -s "${command}"
  history -s "${FUNCNAME[0]}"
  eval "${command}"
}

# gfco - checkout branch
function gfco() {
  local tags branches target
  branches=$(
    git --no-pager branch --all \
      --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)") || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") | sed '/^$/d' |
    fzf --no-hscroll --no-multi -n 2 --header="current: [$(git symbolic-ref --short HEAD 2> /dev/null || echo 'detached HEAD')]" \
        --ansi --preview="git --no-pager log -150 --color --pretty=format:\"%s %C(black)%C(bold)%cr%C(reset)\" ..{2}") || return
  git checkout $(awk '{print $2}' <<<"$target" )
}

# gfshow - show commit
# can specify file
function gfshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index \
      --preview "echo {} | bash -c \"\grep -Eo '[a-f0-9]+' | head -1 | \
                xargs -I % git diff-tree --no-commit-id --name-status -r %\"" \
      --bind "ctrl-m:execute: \
                (echo {} | bash -c \"\grep -Eo '[a-f0-9]+' | head -1 | \
                xargs -I % bash -c 'export TERM=xterm; git show --color=always % | less -R'\")"
}

# gfa - add selected
function gfa() {
  local selected
  selected=$(git -c color.status=always status -s |
    fzf -m --ansi --preview "echo {2} | xargs git diff --color" |
    awk '{print $2}')

  if [[ "${selected}" ]]; then
    echo "${selected}" | xargs git add
    echo "Completed: git add $(echo ${selected})"
  fi
}

# gfus - unstage selected
function gfus() {
  local selected
  selected=$(git -c color.status=always status -s |
    fzf -m --ansi --preview "echo {2} | xargs git diff --cached --color" |
    awk '{print $2}')

  if [[ "${selected}" ]]; then
    echo "${selected}" | xargs git reset -q HEAD
    echo "Completed: git unstage $(echo ${selected})"
  fi
}
