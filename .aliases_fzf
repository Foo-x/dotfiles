# __bfs_dir - breadth-first search for directories
function __bfs_dir() {
  local cmd ignore_ptn="\.git|node_modules"

  cmd="
import os
import re
from collections import deque

pattern = re.compile('${ignore_ptn}')

q = deque([c for c in os.listdir('.') if os.path.isdir(c) and not pattern.match(c)])

while len(q) > 0:
    p = q.popleft()
    print(p)
    for c in os.listdir(p):
        if pattern.match(c):
            continue
        child_path = p + '/' + c
        if os.path.isdir(child_path):
            q.append(child_path)
"
  if which python &> /dev/null; then
    python -c "$cmd"
  else
    python3 -c "$cmd"
  fi
}

# __bfs_file - breadth-first search for files
function __bfs_file() {
  local cmd ignore_ptn="\.git|node_modules"

  cmd="
import os
import re
from collections import deque

for c in os.listdir('.'):
    if os.path.isfile(c):
        print(c)

pattern = re.compile('${ignore_ptn}')

q = deque([c for c in os.listdir('.') if os.path.isdir(c) and not pattern.match(c)])

while len(q) > 0:
    p = q.popleft()
    for c in os.listdir(p):
        if pattern.match(c):
            continue
        child_path = p + '/' + c
        if os.path.isdir(child_path):
            q.append(child_path)
        if os.path.isfile(child_path):
            print(child_path)
"
  if which python &> /dev/null; then
    python -c "$cmd"
  else
    python3 -c "$cmd"
  fi
}

# fd - cd sorted by depth
function fd() {
  local dir null="/dev/null" conv="cat -" sh
  [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]] && null="nul" && conv="iconv -f SJIS -t UTF-8" && sh="bash -ci"

  dir=$(
    ${sh} __bfs_dir 2> /dev/null |
    ${conv} |
    fzf +m +s -q ${1:-''} --preview "ls -p --group-directories-first --color=always {} 2> ${null}"
  ) && cd "$dir"
}

# fe - open selected files with EDITOR
function fe() {
  local files conv="cat -" sh
  [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]] && conv="iconv -f SJIS -t UTF-8" && sh="bash -ci"

  files=($(
    ${sh} __bfs_file 2> /dev/null |
    ${conv} |
    fzf -m -q ${1:-''} --header "Tab: toggle"
  ))
  if [[ -n "$files" ]]; then
    local files_str="$(printf '"%s" ' "${files[@]}")"
    eval "${EDITOR:-vim -p} ${files_str}"
  fi
}

#gfc - conventional commit
function gfc() {
  local toppath conf=$HOME/.gfc.json cmd type_q type scope_q scope subject body is_breaking breaking issues result

  if [[ $1 == "-h" || $1 == "--help" ]]; then
    cat <<EOF
Usage: gfc [<options>]

Options:
  -e          open the editor after prompting
  --help, -h  print this
EOF
    return 0
  fi

  toppath="$(git rev-parse --show-toplevel)"

  if [[ $? != "0" ]]; then
    echo "not a git repository."
    return 1
  fi


  if git diff --cached --quiet --exit-code; then
    echo "no changes added to commit."
    return 1
  fi

  [[ -f ${toppath}/.gfc.json ]] && conf=${toppath}/.gfc.json

  if [[ ! -f ${conf} ]]; then
    echo "no conf file."
    return 1
  fi

  type_q="Select the type of change that you're committing: "
  scope_q="What is the scope of this change (e.g. component or file name): "

  cmd="
import json

with open('${conf}') as f:
    conf = json.load(f)

if 'types' not in conf or len(conf['types']) == 0 or 'scopes' not in conf:
    exit(1)

print('\t'.join(f'{k}@ {v}' for k, v in conf['types'].items()))
print('\t'.join(f'{k}@ {v}' for k, v in conf['scopes'].items()))
"

  types_scopes=$(
    if which python &> /dev/null; then
        python -c "$cmd"
    else
        python3 -c "$cmd"
    fi
  )

  if [[ $? == 1 ]]; then
    echo "invalid .gfc.json"
    return 1
  fi

  type=$(echo "${types_scopes}" | sed -n 1P | tr "\t" "\n" | column -s@ -t | fzf -n1 +s +m --prompt="${type_q}" | cut -f1 -d" ")
  result="${type}"

  scope=$(echo "${types_scopes}" | sed -n 2P | tr "\t" "\n" | column -s@ -t | fzf -n1 +s +m --prompt="${scope_q}" | cut -f1 -d" ")
  if [[ ${scope} ]]; then
    result="${result}(${scope})"
  fi

  echo -e "\033[1m${type_q}\033[00m${type}\n\033[1m${scope_q}\033[00m${scope}"

  read -p $'\033[1mWrite a short, imperative tense description of the change: \033[00m' subject
  read -p $'\033[1mProvide a longer description of the change: \033[00m' body
  if [[ ${body} ]]; then
    body="\n\n${body}"
  fi

  read -p $'\033[1mAre there any breaking changes? [y/N]: \033[00m' is_breaking
  case "${is_breaking}" in
    [yY]*)
      read -p $'\033[1mDescribe the breaking changes: \033[00m' breaking
      if [[ ${breaking} ]]; then
        breaking="\n\nBREAKING CHANGE: ${breaking}"
      fi
      result="${result}!: ${subject}${body}${breaking}"
      ;;
    *)
      result="${result}: ${subject}${body}"
      ;;
  esac

  read -p $'\033[1mAdd issue references (e.g. "fix \#123", "re \#123".): \033[00m' issues
  if [[ ${issues} ]]; then
    result="${result}\n\n${issues}"
  fi

  if [[ $1 == "-e" ]]; then
    git commit -t<(echo -e "${result}")
  else
    echo -e "${result}" | git commit -F-
  fi
}

# gfco - checkout branch
function gfco() {
  local tags branches target

  branches=$(
    git --no-pager branch --all \
        --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mbranch%09%1B[m%(refname:short)%(end)%(end)") || return
  tags=$(
    git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}') || return
  target=$(
    (echo "$branches"; echo "$tags") | sed '/^$/d' |
    fzf --no-hscroll --no-multi -n 2 -q ${1:-''} --header="current: [$(git symbolic-ref --short HEAD 2> /dev/null || echo 'detached HEAD')]" \
        --ansi --preview="git --no-pager log -150 --color --pretty=format:\"%s %C(black)%C(bold)%cr%C(reset)\" ..{2}") || return
  { git checkout -t $(awk '{print $2}' <<< "$target") || git checkout $(awk '{print $2}' <<< "$target"); } 2> /dev/null
}

# gfbd - delete branches
function gfbd() {
  local tags branches target

  target=$(
    git --no-pager branch \
        --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%(refname:short)%(end)%(end)" |
    sed '/^$/d' |
    fzf -m --no-hscroll -q ${1:-''} --header="Tab: toggle") || return
  git branch -D ${target}
}

# gfshow - show commit
# can specify file
function gfshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index \
      --preview "echo {} | bash -c \"\grep -Eo '[a-f0-9]+' | head -1 | \
                xargs -I % git diff-tree --no-commit-id --name-status -r %\"" \
      --bind "ctrl-m:execute: \
                (echo {} | bash -c \"\grep -Eo '[a-f0-9]+' | head -1 | \
                xargs -I % bash -c 'export TERM=xterm; git show --color=always % | less -R'\")"
}

# gfa - add selected
function gfa() {
  local selected unstaged preview="echo {2} | xargs git diff --color"
  [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]] && preview=""

  unstaged=$(git status -s | \grep "^.[^ ]" | awk '{print $2}')
  if [[ ! ${unstaged} ]]; then
    return
  fi

  selected=$(git -c color.status=always status -s |
    \grep -f <(echo -e "${unstaged}") |
    fzf -m --ansi -q ${1:-''} --header "Tab: toggle" --preview "${preview}" |
    awk '{print $2}')

  if [[ "${selected}" ]]; then
    echo "${selected}" | xargs git add
    echo -e "git add:\n$(echo -e "${selected}")"
  fi
}

# gfus - unstage selected
function gfus() {
  local selected staged preview="echo {2} | xargs git diff --cached --color"
  [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]] && preview=""

  staged=$(git status -s | \grep "^[^ ?]" | awk '{print $2}')
  if [[ ! ${staged} ]]; then
    return
  fi

  selected=$(git -c color.status=always status -s |
    \grep -f <(echo -e "${staged}") |
    fzf -m --ansi -q ${1:-''} --header "Tab: toggle" --preview "${preview}" |
    awk '{print $2}')

  if [[ "${selected}" ]]; then
    echo "${selected}" | xargs git reset -q HEAD
    echo -e "git unstage:\n$(echo -e "${selected}")"
  fi
}
