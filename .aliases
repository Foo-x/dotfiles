alias sudo='sudo '
alias _='sudo '

# cd
alias ..='cd ..'
alias ...='cd ...'
alias doc='cd ~/Documents'
alias dl='cd ~/Downloads'
alias ws='cd ~/workspace'
alias dot='cd ~/.dotfiles'
alias cdg='cd $(git rev-parse --show-toplevel)'  # cd to toplevel of git repo
function mkcd() { mkdir -p "$1" && cd "$1"; }

# override for convenience
if [ "$(uname)" = 'Darwin' ]; then
  alias ls='ls -FG'
else
  alias ls='ls -F --color=auto'
fi
alias ll='ls -lahi --time-style=+%c'
alias mkdir='mkdir -p'
alias df='df -h'
alias du='du -h'
alias cp='cp -iav'
alias ln='ln -iv'
alias mv='mv -iv'
alias rm='rm -iv'
alias free='free -h'
alias grep='grep --color=auto -En'  # use regexp and show line numbers
alias dirs='dirs -v'

# shorten
alias g=git
alias h=history
alias j=jobs

if type vim &> /dev/null; then
  alias vi=vim
fi

alias md=mkdir
alias gr=grep
alias dirsc='dirs -c && pushd -n ${PWD} > /dev/null'
alias cpb='cp -b'
alias lnb='ln -b'
alias mvb='mv -b'

# others
alias relogin='exec $SHELL -l'
alias osver='cat /etc/*release'
alias mirror='rsync --delete'
alias cctypes='echo "Conventional Commits"; echo; echo "
build		Changes that affect the build system or external dependencies (example scopes - gulp, broccoli, npm)
chore		Other changes that don'\''t modify src or test files
ci		Changes to our CI configuration files and scripts (example scopes - Travis, Circle, BrowserStack, SauceLabs)
docs		Documentation only changes
feat		A new feature
fix		A bug fix
perf		A code change that improves performance
refactor	A code change that neither fixes a bug nor adds a feature
revert		Reverts a previous commit
style		Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
test		Adding missing tests or correcting existing tests
"'
alias al='cat ~/.dotfiles/.aliases{,_fzf} | $PAGER'
alias inputrc='$PAGER ~/.inputrc'
alias vikeymap='$PAGER ~/.dotfiles/.vim/keymap.vimrc'

# nim
alias nimc='nim cpp -o:./a.out'
alias nimcr='nim cpp -o:./a.out -d:release --hints:off --verbosity:0'
alias nimr='nimc -r'
alias nimrr='nimcr -r'

# docker
alias d='docker'
alias dal='alias | grep "='\''docker[^-]"'
alias da='docker attach'
alias db='docker build'
alias di='docker image'
alias dir='docker image rm'
alias dip='docker image prune'
alias dis='docker images'
alias dp='docker ps'
alias dr='docker run'
alias dri='docker run -it'
alias dv='docker volume'
alias dvl='docker volume ls'
alias dvp='docker volume prune'
alias dx='docker exec'
alias dxi='docker exec -it'
alias dc='docker-compose'
alias dcal='alias | grep "='\''docker-compose"'
alias dcb='docker-compose build'
alias dcd='docker-compose down'
alias dce='docker-compose exec'
alias dcp='docker-compose ps'
alias dcprs='docker ps --filter "label=com.docker.compose.project" -q | xargs docker inspect --format="{{index .Config.Labels \"com.docker.compose.project\"}}" | sort | uniq'
alias dcr='docker-compose run'
alias dcu='docker-compose up -d'
alias dcub='docker-compose up -d --build'

# tmux
alias tm='tmux'
alias tmal='alias | grep "='\''tmux"'
alias tma='tmux attach'
alias tmd='tmux detach'
alias tmkill='tmux kill-session'
alias tml='tmux ls'
alias tmn='tmux new'
alias tmnw='tmux neww'
alias tmr='tmux rename'
alias tmreload='tmux source-file ~/.tmux.conf'
alias tmconf='$PAGER ~/.tmux.conf'

function with_env() {
  (
    set -a
    . .env
    set +a
    "$@"
  )
}

function out() {
  "$@" &> out
}
alias out='out '

function silent() {
  "$@" &> /dev/null
}
alias silent='silent '

function preview() {
  "$@" | less
}
alias preview='preview '

if type rsync &> /dev/null; then
  alias rsync='rsync -aPvh'
  alias rsyncb='rsync --backup --suffix=.`date +%Y%m%d_%H%M%S`'

  function incr_bak() {
    local base="$2"

    mkdir "${base}"

    local latest="../$(\ls ${base} | tail -n 1)"

    rsync --link-dest="${latest}" "$1" "${base}/$(date +%Y%m%d_%H%M%S)"
  }
fi

if [[ "${WSL_DISTRO_NAME}" ]]; then
  alias hostip='\grep nameserver /etc/resolv.conf | cut -d" " -f2'

  function open() {
    wslview "$(wslpath -w "$1")"
  }

  function is_win_dir() {
    case $PWD/ in
      /mnt/*) return $(true);;
      *) return $(false);;
    esac
  }

  # use git.exe in win dir for performance
  function git() {
    if is_win_dir; then
      git.exe "$@"
    else
      /usr/bin/git "$@"
    fi
  }
fi
