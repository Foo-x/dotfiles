# use in your .bash_profile or .bashrc like below
# . /path/to/dotfiles/.aliases

alias sudo='sudo '
alias _='sudo '

# cd
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias doc='cd ~/Documents'
alias dl='cd ~/Downloads'
alias ws='cd ~/Documents/workspace'
alias cdg='cd $(git rev-parse --show-toplevel)'
function mkcd() { mkdir -p "$1" && cd "$1"; }
function cdh() {
  # ref: https://gist.github.com/matsub/8454ddda75bbe1039dc3af8d6638be60

  local pos=0 page_pos=0 list i input
  local height=$((LINES - 3))

  clear

  # hide the cursor and trap to restore at the end
  trap "tput cnorm; trap - RETURN INT; return" RETURN INT
  tput civis

  readarray -t menu < <(dirs -v | sort -k 2 | uniq -f 1 | sort -n -k 1 | cut -d" " -f3-4)

  # ceil
  local pages=$(((${#menu[@]} + height - 1) / height))

  while true; do
    # move to origin and clear
    printf "\e[H\e[2J" >&2

    printf "pages: $((page_pos + 1))/$pages (? to help)\n\n" >&2

    list=("${menu[@]:$((page_pos * height)):$height}")

    for i in ${!list[@]};do
      if [ $pos = $i ]; then
        printf "\e[1;31m>\e[m \e[1;4m" >&2
      else
        printf "  " >&2
      fi
      printf "${list[$i]}\e[m\n" >&2
    done

    read -sn1 input
    if [ "$input" = $'\x1b' ]; then
      read -sn2 input
    fi
    case $input in
      "h"|$'\x5b\x44')
        if [ $page_pos -gt 0 ]; then
          # previous page
          pos=0
          let page_pos--
        fi
        ;;
      "j"|$'\x5b\x42')
        if [ $pos -lt $((${#list[@]} - 1)) ]; then
          pos=$((pos + 1))
        elif [ $pos = $((${#list[@]} - 1)) ] && [ $page_pos -lt $((pages - 1)) ]; then
          # next page
          pos=0
          let page_pos++
        fi
        ;;
      "k"|$'\x5b\x41')
        if [ $pos -gt 0 ]; then
          pos=$((pos - 1))
        elif [ $pos = 0 ] && [ $page_pos -gt 0 ]; then
          # previous page
          pos=$((height - 1))
          let page_pos--
        fi
        ;;
      "l"|$'\x5b\x43')
        if [ $page_pos -lt $((pages - 1)) ]; then
          # next page
          pos=0
          let page_pos++
        fi
        ;;
      "")
        cd "$(bash -c "echo ${list[$pos]}")"
        return
        ;;
      "?")
        printf "\e[H\e[2J" >&2
        echo "j/k/↓/↑     : move cursor"
        echo "h/l/←/→     : move page"
        echo "Enter/Space : cd and end"
        echo "q           : abort"
        echo "?           : show this help"
        echo ""
        read -rsn1 -p "Press any key to continue."
        ;;
      "q")
        printf "\nAbort.\n" >&2
        return
        ;;
    esac
  done
}
function cdm() {
  # ref: https://gist.github.com/matsub/8454ddda75bbe1039dc3af8d6638be60

  local pos page_pos cur=`pwd` list i input
  local height=$((LINES - 4))

  clear

  # hide the cursor and trap to restore at the end
  trap "tput cnorm; trap - RETURN INT; return" RETURN INT
  tput civis

  while true; do
    pos=0
    page_pos=0

    readarray -t menu < <(cd "$(bash -c "echo $cur")"; printf "%s\n" {./,{.,}?*/})

    # ceil
    local pages=$(((${#menu[@]} + height - 1) / height))

    while true; do
      # move to origin and clear
      printf "\e[H\e[2J" >&2

      echo $cur
      printf "pages: $((page_pos + 1))/$pages (? to help)\n\n" >&2

      list=("${menu[@]:$((page_pos * height)):$height}")

      for i in ${!list[@]};do
        if [ $pos = $i ]; then
          printf "\e[1;31m>\e[m \e[1;4m" >&2
        else
          printf "  " >&2
        fi
        printf "${list[$i]}\e[m\n" >&2
      done

      IFS="\n" read -sn1 input
      if [ "$input" = $'\x1b' ]; then
        read -sn2 input
      fi
      case $input in
        "h"|$'\x5b\x44')
          if [ $page_pos -gt 0 ]; then
            # previous page
            pos=0
            let page_pos--
          fi
          ;;
        "j"|$'\x5b\x42')
          if [ $pos -lt $((${#list[@]} - 1)) ]; then
            pos=$((pos + 1))
          elif [ $pos = $((${#list[@]} - 1)) ] && [ $page_pos -lt $((pages - 1)) ]; then
            # next page
            pos=0
            let page_pos++
          fi
          ;;
        "k"|$'\x5b\x41')
          if [ $pos -gt 0 ]; then
            pos=$((pos - 1))
          elif [ $pos = 0 ] && [ $page_pos -gt 0 ]; then
            # previous page
            pos=$((height - 1))
            let page_pos--
          fi
          ;;
        "l"|$'\x5b\x43')
          if [ $page_pos -lt $((pages - 1)) ]; then
            # next page
            pos=0
            let page_pos++
          fi
          ;;
        " ")
          cur=$(cd "$(bash -c "echo $cur/${list[$pos]}")"; pwd)
          break
          ;;
        $'\x7f')
          cur=$(cd "$(bash -c "echo $cur/.."))"; pwd)
          break
          ;;
        "")
          cd "$(bash -c "echo $cur/${list[$pos]}")"
          return
          ;;
        "?")
          printf "\e[H\e[2J" >&2
          echo "j/k/↓/↑   : move cursor"
          echo "h/l/←/→   : move page"
          echo "Enter     : cd and end"
          echo "Space     : cd and continue"
          echo "Backspace : cd to parent"
          echo "q         : abort"
          echo "?         : show this help"
          echo ""
          read -rsn1 -p "Press any key to continue."
          break
          ;;
        "q")
          printf "\nAbort.\n" >&2
          return
          ;;
      esac
    done
  done
}

# confirm
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ln='ln -i'

# override for convenience
if [ "$(uname)" = 'Darwin' ]; then
  alias ls='ls -FG'
else
  alias ls='ls -F --color=auto'
fi
alias ll='ls -lah'
alias mkdir='mkdir -p'
alias df='df -h'
alias du='du -h'
alias free='free -h'
alias grep='grep --color=auto -En'
alias cd='pushd > /dev/null'
alias dirs='dirs -v'

# shorten
alias g=git
alias h=history
alias j=jobs
alias vi=vim
alias md=mkdir
alias gr=grep
alias dirsc='dirs -c'

alias reload='. ~/.bash_profile; . ~/.bashrc; bind -f ~/.inputrc'

function open() {
  if which open &> /dev/null; then
    open "$@"
  elif which xdg-open &> /dev/null; then
    xdg-open "$@"
  elif which explorer &> /dev/null; then
    explorer "$@"
  fi
}

function open-http() {
  if which open &> /dev/null; then
    open http://$1
  elif which xdg-open &> /dev/null; then
    xdg-open http://$1
  elif which explorer &> /dev/null; then
    explorer http://$1
  fi
}

function open-https() {
  if which open &> /dev/null; then
    open https://$1
  elif which xdg-open &> /dev/null; then
    xdg-open https://$1
  elif which explorer &> /dev/null; then
    explorer https://$1
  fi
}
