#!/usr/bin/env -S bun --silent

import { $ } from 'bun';
import path, { basename } from 'path';

const globalRoot = (await $`bun pm -g ls 2> /dev/null | head -n1 | cut -d' ' -f1`.text()).trim();
const yargsPath = path.join(globalRoot, 'node_modules', 'yargs', 'yargs');
let yargs: Function;
try {
  yargs = require(yargsPath);
} catch {
  console.info('Install yargs with "bun install -g yargs".');
  process.exit(1);
}

await yargs(process.argv.slice(2))
  .command(['x <cmd>'], 'fzf execute with xargs', (yargs: any) => {
    yargs.strict(false);
  }, async () => {
    await $`${{ raw: `fzf -m --header "Tab: toggle" | xargs ${process.argv.slice(3).join(' ')}` }}`;
  })
  .command(['ex'], 'fzf execute after editing', {}, async () => {
    await $`${{ raw: `fzf -m --header "Tab: toggle" | vipe | $SHELL` }}`;
  })
  .command(['e [query]', 'edit'], 'fzf edit with EDITOR', (yargs: any) => {
    yargs.strict(false);
  }, async () => {
    const files = (await $`${{ raw: `bfs f -I -E '.git/objects' 2> /dev/null | fzf -m -q ${process.argv[3] || '\0'} --header "Tab: toggle"` }}`).stdout.toString();
    if (files) {
      const cmd = `${process.env.EDITOR} ${files.replace(/\n/, ' ')} > /dev/tty`;
      await $`${{ raw: cmd }}`;
    }
  })
  .command(['g <subcmd>', 'git'], 'fzf git', (yargs: any) => {
    yargs
      .command(['e [query]', 'edit'], 'fzf edit with EDITOR only git tracked', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const files = (await $`${{ raw: `bfs f -E '.git/objects' 2> /dev/null | fzf -m -q ${process.argv[4] || '\0'} --header "Tab: toggle"` }}`).stdout.toString();
        if (files) {
          const cmd = `${process.env.EDITOR} ${files.replace(/\n/, ' ')} > /dev/tty`;
          await $`${{ raw: cmd }}`;
        }
      })
      .command(['em [query]'], 'fzf edit with EDITOR only git modified', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const files = (await $`${{ raw: `git ls-files -o -m --exclude-standard $(git rev-parse --show-cdup) 2> /dev/null | fzf -m -q ${process.argv[4] || '\0'} --header "Tab: toggle"` }}`).stdout.toString();
        if (files) {
          const cmd = `${process.env.EDITOR} ${files.replace(/\n/, ' ')} > /dev/tty`;
          await $`${{ raw: cmd }}`;
        }
      })
      .command(['d [query]', 'diff'], 'fzf git diff', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const files = (await $`${{ raw: `git ls-files -m | fzf -m -q ${process.argv[4] || '\0'} --header "Tab: toggle"` }}`).stdout.toString().trim().replaceAll('\n', ' ');
        if (files) {
          await $`${{ raw: `GIT_PAGER=delta git diff ${files} > /dev/tty` }}`;
        }
      })
      .command(['co [query]', 'checkout'], 'fzf git checkout', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const localBranches = await $`git --no-pager branch --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mlocal%09%1B[m%(refname:short)%(end)%(end)"`.text();
        const remoteBranches = await $`git --no-pager branch --remote --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%1B[0;34;1mremote%09%1B[m%(refname:short)%(end)%(end)"`.text();
        const tags = await $`git --no-pager tag | awk '{print "\x1b[35;1mtag\x1b[m\t" $1}'`.text();
        const branches = localBranches + remoteBranches + tags;
        console.log(branches)
        const current = await $`git symbolic-ref --short HEAD 2> /dev/null`.nothrow().text() || 'detached HEAD';

        const target = Buffer.alloc(300);
        await $`sed '/^$/d' < ${Buffer.from(branches)} | fzf --no-hscroll --no-multi -n 2 -q ${process.argv[4] || '\0'} --header="current: [${{ raw: current.replace('\n', '') }}]" --ansi --preview='git --no-pager log -150 --color --pretty=format:"%s %C(black)%C(bold)%cr%C(reset)" ..{2}' > ${target}`;

        const [typ, name] = target.toString().replace(/\0|\n/g, '').split('\t');
        if (typ === 'remote') {
          const branchName = name.replace(/^.+\//, '');
          await $`${{ raw: `git checkout -t ${name} 2> /dev/null || git checkout ${branchName} 2> /dev/null` }}`;
        } else {
          await $`${{ raw: `git checkout ${name} 2> /dev/null` }}`;
        }
      })
      .command(['coid [query]'], 'fzf git checkout commit id', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' --branches --tags --remotes ${process.argv[4] || ''} | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;

        const cid = target.toString().replace(/\0|\n/g, '');
        await $`git checkout ${cid}`.nothrow();
      })
      .command(['bd [query]'], 'fzf git branch -D', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `git --no-pager branch --format="%(if)%(HEAD)%(then)%(else)%(if:equals=HEAD)%(refname:strip=3)%(then)%(else)%(refname:short)%(end)%(end)" | sed '/^$/d' | fzf -m --no-hscroll -q ${process.argv[4] || '\0'} --header="Tab: toggle" | xargs -r git branch -D` }}`;
      })
      .command(['show [path]'], 'fzf git commit browser', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' ${process.argv[4] || ''} | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" --bind "ctrl-m:execute: (echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git show --color % | LESS= less -R > /dev/tty)"` }}`;
      })
      .command(['id [path]'], 'fzf git output commit id', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `git rev-parse $(git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' --branches --tags --remotes ${process.argv[4] || ''} | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1)` }}`;
      })
      .command(['chp [args]'], 'fzf git cherry-pick', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' --branches --tags --remotes | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git cherry-pick ${process.argv.slice(4)} ${cid}`;
        }
      })
      .command(['rb [query]', 'rebase'], 'fzf git rebase', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' --branches --tags --remotes ${process.argv[4] || ''} | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;

        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git rebase ${cid}`;
        }
      })
      .command(['rbi [query]'], 'fzf git rebase -i', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' --branches --tags --remotes ${process.argv[4] || ''} | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;

        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git rebase -i ${cid} > /dev/tty`;
        }
      })
      .command(['bis [query]'], 'fzf git bisect start', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git log --graph --color --date-order --format="%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)" --date=format-local:'%Y-%m-%d %H:%M:%S' --branches --tags --remotes ${process.argv[4] || ''} | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;

        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git bisect start @ ${cid}`;
        }
      })
      .command(['cf [args]'], 'fzf git commit --fixup', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --fixup ${cid} ${process.argv.slice(4)}`.nothrow();
        }
      })
      .command(['cF [args]'], 'fzf git commit --fixup and rebase', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --fixup ${cid} ${process.argv.slice(4)}`.nothrow();
          await $`git -c sequence.editor=true rebase -i --autosquash ${cid}^`;
        }
      })
      .command(['ca [args]'], 'fzf git commit --fixup amend', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --fixup amend:${cid} ${process.argv.slice(4)} > /dev/tty`;
        }
      })
      .command(['cA [args]'], 'fzf git commit --fixup amend and rebase', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --fixup amend:${cid} ${process.argv.slice(4)} > /dev/tty`;
          await $`git -c sequence.editor=true rebase -i --autosquash ${cid}^ > /dev/tty`;
        }
      })
      .command(['cr [args]'], 'fzf git commit --fixup reword', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --fixup reword:${cid} ${process.argv.slice(4)} > /dev/tty`;
        }
      })
      .command(['cR [args]'], 'fzf git commit --fixup reword and rebase', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --fixup reword:${cid} ${process.argv.slice(4)} > /dev/tty`;
          await $`git -c sequence.editor=true rebase -i --autosquash ${cid}^ > /dev/tty`;
        }
      })
      .command(['cs [args]'], 'fzf git commit --squash', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --squash ${cid} ${process.argv.slice(4)} > /dev/tty`.nothrow();
        }
      })
      .command(['cS [args]'], 'fzf git commit --squash and rebase', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = Buffer.alloc(10);
        await $`git bcl | fzf --ansi --no-sort --reverse --tiebreak=index --preview "echo {} | \grep -Eo '[a-f0-9]+' | head -1 | xargs -I % git diff-tree --no-commit-id --name-status -r %" | \grep -Eo '[a-f0-9]+' | head -1 > ${target}`;
        const cid = target.toString().replace(/\0|\n/g, '');
        if (cid) {
          await $`git commit --squash ${cid} ${process.argv.slice(4)} > /dev/tty`.nothrow();
          await $`git rebase -i --autosquash ${cid}^ > /dev/tty`;
        }
      })
  })
  .command(['d <subcmd>', 'docker'], 'fzf docker', (yargs: any) => {
    yargs
      .command(['l [args]', 'logs'], 'fzf docker logs', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const result = (await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -n 2,-1 | awk '{print $NF}'` }}`).stdout.toString();
        if (result) {
          await $`${{ raw: `docker logs ${result} ${process.argv.slice(4)}` }}`;
        }
      })
      .command(['r [args]', 'run'], 'fzf docker run', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const result = (await $`${{ raw: `docker images | sed 1d | fzf --no-sort -n 1,2 | awk '{print $1 ":" $2}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker run ${result} ${process.argv.slice(4)}` }}`;
          } catch {
          }
        }
      })
      .command(['rr [args]'], 'fzf docker run rm', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const result = (await $`${{ raw: `docker images | sed 1d | fzf --no-sort -n 1,2 | awk '{print $1 ":" $2}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker run --rm ${result} ${process.argv.slice(4)}` }}`;
          } catch {
          }
        }
      })
      .command(['ri [args]'], 'fzf docker run interactive', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const result = (await $`${{ raw: `docker images | sed 1d | fzf --no-sort -n 1,2 | awk '{print $1 ":" $2}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker run -it ${result} ${process.argv.slice(4)}` }}`;
          } catch {
          }
        }
      })
      .command(['rir [args]'], 'fzf docker run interactive rm', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const result = (await $`${{ raw: `docker images | sed 1d | fzf --no-sort -n 1,2 | awk '{print $1 ":" $2}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker run -it --rm ${result} ${process.argv.slice(4)}` }}`;
          } catch {
          }
        }
      })
      .command(['x [args]', 'exec'], 'fzf docker exec', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        if (process.argv.slice(4).length === 0) {
          console.error('"docker exec" requires a command.');
          return;
        }
        const result = (await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -n 2,-1 | awk '{print $NF}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker start ${result} > /dev/null && docker exec ${result} ${process.argv.slice(4)}` }}`;
          } catch {
          }
        }
      })
      .command(['xi [args]'], 'fzf docker exec interactive', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        if (process.argv.slice(4).length === 0) {
          console.error('"docker exec" requires a command.');
          return;
        }
        const result = (await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -n 2,-1 | awk '{print $NF}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker start ${result} > /dev/null && docker exec -it ${result} ${process.argv.slice(4)}` }}`;
          } catch {
          }
        }
      })
      .command(['a [query]', 'attach'], 'fzf docker attach', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const result = (await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -1 -q '${process.argv[4] || '\0'}' -n 2,-1 | awk '{print $NF}'` }}`).stdout.toString();
        if (result) {
          try {
            await $`${{ raw: `docker start ${result} > /dev/null && docker attach ${result}` }}`;
          } catch {
          }
        }
      })
      .command(['s [query]', 'start'], 'fzf docker start', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m -n 2,-1 | awk '{ print $NF }' | xargs -r docker start` }}`;
      })
      .command(['st [query]', 'stop'], 'fzf docker stop', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker ps | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m --tac -n 2,-1 | awk '{ print $NF }' | xargs -r docker stop` }}`;
      })
      .command(['rs [query]', 'restart'], 'fzf docker restart', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m -n 2,-1 | awk '{ print $NF }' | xargs -r docker restart` }}`;
      })
      .command(['cor [query]'], 'fzf docker container rm', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m --tac -n 2,-1 | awk '{ print $NF }' | xargs -r docker container rm` }}`;
      })
      .command(['corv [query]'], 'fzf docker container rm --volumes', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker ps -a | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m --tac -n 2,-1 | awk '{ print $NF }' | xargs -r docker container rm --volumes` }}`;
      })
      .command(['ir [query]'], 'fzf docker image rm', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker images | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m --tac -n 1,2 | awk '{ print $1 ":" $2 }' | xargs -r docker image rm` }}`;
      })
      .command(['vr [query]'], 'fzf docker volume rm', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        await $`${{ raw: `docker volume ls | sed 1d | fzf --no-sort -q '${process.argv[4] || '\0'}' -m --tac -n 2 | awk '{ print $NF }' | xargs -r docker volume rm` }}`;
      })
  })
  .command(['m <subcmd>', 'mise'], 'fzf mise', (yargs: any) => {
    yargs
      .command(['i [query]', 'install'], 'fzf mise install', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise ls-remote --all | fzf --tac -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          await $`${{ raw: `mise install ${target}` }}`;
        }
      })
      .command(['pi [query]'], 'fzf mise plugins install', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise p ls-remote | fzf -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          const actual = target.replace(/[ *]+/, '');
          await $`${{ raw: `mise plugins install -y ${actual}` }}`;
        }
      })
      .command(['u [query]', 'use'], 'fzf mise use -g', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const corePlugins = await $`mise plugin ls --core`.text();
        const plugins = await $`mise plugin ls-remote`.text();
        const allPlugins = corePlugins + plugins;
        const target = Buffer.alloc(50);
        await $`echo ${allPlugins.replaceAll('*', '')} | sort | fzf -1 -q '${process.argv[4] || '\0'}' > ${target}`;
        if (target) {
          await $`${{ raw: `mise use -g ${target.toString().replace(/\0|\n/g, '')}` }}`.nothrow();
        }
      })
      .command(['ul [query]'], 'fzf mise use (local)', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const corePlugins = await $`mise plugin ls --core`.text();
        const plugins = await $`mise plugin ls-remote`.text();
        const allPlugins = corePlugins + plugins;
        const target = Buffer.alloc(50);
        await $`echo ${allPlugins.replaceAll('*', '')} | sort | fzf -1 -q '${process.argv[4] || '\0'}' > ${target}`;
        if (target) {
          await $`${{ raw: `mise use ${target.toString().replace(/\0|\n/g, '')}` }}`.nothrow();
        }
      })
      .command(['uv [query]'], 'fzf mise use -g (installed plugins with version)', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise ls-remote --all | fzf --tac -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          await $`${{ raw: `mise use -g ${target}` }}`;
        }
      })
      .command(['uvl [query]'], 'fzf mise use (local installed plugins with version)', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise ls-remote --all | fzf --tac -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          await $`${{ raw: `mise use ${target}` }}`;
        }
      })
      .command(['rm [query]', 'unuse'], 'fzf mise unuse', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise ls --no-header | sed -E 's/([^ ]+[ ]+[^ ]+).*/\\1/' | fzf -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          const actual = target.replace(/ +/, '@');
          await $`${{ raw: `mise rm ${actual}` }}`;
        }
      })
      .command(['un [query]', 'uninstall'], 'fzf mise uninstall', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise ls --no-header | sed -E 's/([^ ]+[ ]+[^ ]+).*/\\1/' | fzf -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          const actual = target.replace(/ +/, '@');
          await $`${{ raw: `mise uninstall ${actual}` }}`;
        }
      })
      .command(['prm [query]', 'pun'], 'fzf mise plugins uninstall', (yargs: any) => {
        yargs.strict(false);
      }, async () => {
        const target = (await $`${{ raw: `mise plugins ls | fzf -1 -q '${process.argv[4] || '\0'}'` }}`).stdout.toString();
        if (target) {
          await $`${{ raw: `mise plugins rm ${target}` }}`;
        }
      })
  })
  .command(['o', 'open'], 'fzf open', (yargs: any) => {
    yargs.strict(false);
  }, async () => {
    await $`${{ raw: `fzf -m --header "Tab: toggle" | xargs -i bash -c 'open "{}"'` }}`;
  })
  .completion()
  .usage('$0 <subcmd>')
  .help()
  .alias('h', 'help')
  .demandCommand(1)
  .strict()
  .scriptName(basename(import.meta.filename))
  .parse();

// vim: ft=javascript
