[color]
    ui = auto
[alias]
    # log
    ## oneline
    l = "!git log --graph --color --date-order --pretty=\"%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)\" --date=format-local:'%Y-%m-%d %H:%M:%S'"
    la = "!git log --graph --color --date-order --pretty=\"%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)\" --date=format-local:'%Y-%m-%d %H:%M:%S' --all"

    ## oneline + changed files
    l1 = "!git log --graph --color --date-order --pretty=\"%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)\" --date=format-local:'%Y-%m-%d %H:%M:%S' --name-status"
    l1a = "!git log --graph --color --date-order --pretty=\"%C(#6c9ac5)%h%C(reset) %C(#afc0d1)%cd%C(reset)%C(auto)%d%Creset %s %C(#5d7ea0)@%an%C(reset)%n\" --date=format-local:'%Y-%m-%d %H:%M:%S' --name-status --all"

    ## detail
    l2 = log -p --decorate --color
    l2a = log -p --decorate --color --all

    ## contribution stats by author
    ## takes options of git log
    contribution-stats = "!f(){ \
        result=$(git shortlog -sn | \
        cut -f2- | \
        xargs -I_ bash -c 'git log --author='\\''_'\\'' --pretty=tformat: --numstat "$@" | \
            \\grep -v "^-" | \
            awk '\\''BEGIN { add=0; remove=0 } { add+=$1; remove+=$2 } END { if (add != 0 || remove != 0) printf \"_\\t+%s\\t-%s\\n\", add, remove }'\\''' -- "$@"); \
        if type column > /dev/null 2>&1; then \
            echo \"$result\" | column -t -s$'\t'; \
        else \
            echo \"$result\"; \
        fi \
    };f"

    # branch
    b = branch
    ba = branch -a
    bm = branch -m
    bmg = branch --merged
    bd = branch -d
    bdd = branch -D
    bv = branch -avv
    co = checkout
    cb = checkout -b
    com = checkout -m
    rbc = rebase --continue
    rba = rebase --abort
    rbs = rebase --skip
    sco = sparse-checkout
    scol = sparse-checkout list
    scoa = sparse-checkout add
    scos = sparse-checkout set --cone
    scod = sparse-checkout disable
    db = config init.defaultBranch

    ## rebase
    rb = "!f(){ \
        git rebase ${@:-$(git config init.defaultBranch || echo master)}; \
    };f"

    ## rebase interactive
    rbi = "!f(){ \
        git rebase -i ${@:-$(git config init.defaultBranch || echo master)}; \
    };f"

    ## delete merged branch
    dmb = "!f(){ \
        git branch --merged | \
        egrep -v '\\*|develop|master|main' | \
        sed 's/+ //' | \
        xargs -i sh -c 'git worktree remove {} 2> /dev/null; git branch -d {} 2> /dev/null'; \
    };f"

    ## check if can merge
    mc = "!f(){ \
        git checkout -q ${1:-$(git config init.defaultBranch || echo master)}; \
        git format-patch @..$(git rev-parse @{-1}) --stdout | git apply --check; \
        git checkout -q -; \
    };f"

    # add
    a = add
    aa = add --all
    ai = add --interactive

    # commit
    c = commit
    cm = commit -m
    cmall = !git add --all && git commit -m
    ca = commit --amend
    ce = commit --amend --no-edit
    ic = commit --allow-empty -m \"Initial Commit\"
    cf = commit --fixup
    chp = cherry-pick

    # remote
    p = pull
    ps = push
    psf = push --force-with-lease --force-if-includes
    psd = push --delete
    ac = !git add --all && git commit
    acp = !git add --all && git commit && git push
    acep = !git add --all && git commit --allow-empty-message -m '' && git push
    f = fetch
    rv = remote -vv
    ra = remote add
    rsu = remote set-url
    rs = remote show
    rso = remote show origin
    rp = remote prune
    rpo = remote prune origin
    cl = clone
    clp = clone --filter=blob:none
    clps = clone --filter=blob:none --sparse
    fbv = !git fetch && git bv

    ## pull and prune
    pp = "!f(){ \
        git checkout ${1:-$(git config init.defaultBranch || echo master)} && \
        git pull && \
        git remote prune origin && \
        git dmb; \
    };f"

    ## set upstream of current branch to the same name in origin
    sus = !git branch -u origin/`git symbolic-ref --short HEAD` `git symbolic-ref --short HEAD`

    # reset
    re = reset
    res = reset --soft
    reh = reset --hard
    us = reset @  # unstage

    # diff
    d = diff
    dc = diff --cached
    da = diff @
    dm = diff --diff-filter=M   # modified
    dnm = diff --diff-filter=m  # not modified
    dt = difftool -d

    # merge
    me = merge
    mec = merge --continue
    mea = merge --abort
    met = mergetool

    # stash
    ss = stash
    sl = stash list
    sa = stash apply
    sd = stash drop
    sp = stash pop
    sshow = stash show -p
    ssa = !git stash && git stash apply

    # worktree
    wt = worktree
    wta = worktree add
    wtl = worktree list
    wtp = worktree prune
    wtr = worktree remove
    wtpp = "!f(){ \
        cd $(git worktree list | head -n1 | cut -d' ' -f1) && \
        git pull && \
        git remote prune origin && \
        git dmb; \
    };f"

    # submodule
    sub = submodule
    suba = submodule add --progress
    subu = submodule update --init --recursive --progress

    # bisect
    bi = bisect
    bis = bisect start
    bir = bisect run
    big = bisect good
    bib = bisect bad
    bil = bisect log
    bire = bisect reset

    # maintenance
    ma = maintenance
    mar = maintenance run
    mas = maintenance start
    mast = maintenance stop
    mare = maintenance register
    maun = maintenance unregister

    # ignore
    ig = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@ ;}; gi"
    igf = update-index --skip-worktree
    igfn = update-index --no-skip-worktree
    igfl = !git ls-files -v | \\grep -E '^S|^h'
    igedit = !$EDITOR $(git rev-parse --show-toplevel)/.git/info/exclude

    # ls-files
    ls = ls-files
    lso = ls-files --others
    lsm = ls-files --modified

    # others
    s = status -sb
    si = status -sb --ignored
    tree = !git ls-files | tree --fromfile=.
    treed = !git ls-files | tree --fromfile=. -d

    ## cp untracked and ignored
    cpui = "!f(){ \
        local cp='cp -a'; \
        if [ -x \"$(command -v rsync)\" ]; then \
            cp='rsync -ah --info=progress2'; \
        fi; \
        git status -s --ignored \
        | egrep '^\\?\\?|^!!' \
        | sed 's/^...//' \
        | xargs -i $cp {} $1/{}; \
    };f"

    ## edit all changed files
    editall = !$EDITOR $(git ls-files -o -m --exclude-standard $(git rev-parse --show-cdup))

    ## show short commit hash
    rev = rev-parse --short @

    ## show aliases
    al = config --get-regexp alias.*

    ## blame ignore revs
    bl = "!f(){ [ -f $(git rev-parse --show-toplevel)/.git-blame-ignore-revs ] && git blame --ignore-revs-file .git-blame-ignore-revs "$@" || git blame "$@";};f"

[push]
    default = current
[core]
    hooksPath = ~/.dotfiles/.config/git/hooks
    quotePath = false
[delta]
    navigate = true
    commit-decoration-style = box
    features = readable
    true-color = always
    syntax-theme = ansi
[delta "readable"]
    line-numbers = true
    side-by-side = true
[commit]
    template = ~/.dotfiles/.config/git/commit_template
[diff]
    tool = nvimdirdiff
    algorithm = histogram
    colorMoved = dimmed-zebra
    wsErrorHighlight = all
    renames = copy
[difftool]
    prompt = false
[difftool "nvimdirdiff"]
    cmd = nvim -c 'G difftool -y | 1tabc'
[merge]
    ff = false
    tool = nvimdiff
    autostash = true
    conflictstyle = zdiff3
[mergetool]
    keepBackup = false
    writeToTemp = true
[fetch]
    prune = true
[pull]
    ff = only
[help]
    autocorrect = -1
[rebase]
    abbreviateCommands = true
    autosquash = true
    autostash = true
[submodule]
    recurse = true
[init]
    defaultBranch = master
[grep]
    lineNumber = true
    column = true
    patternType = perl
[maintenance "gc"]
    enabled = true
[maintenance "commit-graph"]
    enabled = true
[maintenance "prefetch"]
    enabled = true
[maintenance "loose-objects"]
    enabled = true
[maintenance "incremental-repack"]
    enabled = true
[maintenance "pack-refs"]
    enabled = true
