let $XDG_CONFIG_HOME=get(environ(), 'XDG_CONFIG_HOME', $HOME . '/.config')
let $XDG_CACHE_HOME=get(environ(), 'XDG_CACHE_HOME', $HOME . '/.cache')
let $XDG_DATA_HOME=get(environ(), 'XDG_DATA_HOME', $HOME . '/.local/share')
let $XDG_STATE_HOME=get(environ(), 'XDG_STATE_HOME', $HOME . '/.local/state')

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after
set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

set nocompatible
set backspace=indent,eol,start
set encoding=utf-8
set cursorline
set cindent
set shiftwidth=2
set tabstop=2
set expandtab
set noerrorbells
set visualbell t_vb=
set runtimepath+=$HOME/.vim
set noswapfile
set wildmenu
set wildmode=list:longest
set laststatus=2
set statusline=\[%n\]\ %F%m%r%h%w%=%l,%v/%L\ %{&ff}\ %{&fenc!=''?&fenc:&enc}\ %y
set confirm
set hidden
set splitbelow
set splitright
set formatoptions+=M
set matchpairs+=<:>
set scrolloff=5
set shortmess+=FI
set shortmess-=S
set mouse=
set updatetime=100
set diffopt+=algorithm:histogram,indent-heuristic
set spelllang=en,cjk
set helplang=en,ja
set errorformat+=%-G#q#%.%#
set errorformat+=%f%*[^[:fname:]]%l\ %m
set errorformat+=%f%*[^[:fname:]]%l
set errorformat+=%f
set errorformat+=%-G%.%#
set foldmethod=indent
set foldminlines=3
set nofoldenable
if has('nvim')
  set foldcolumn=auto
  set signcolumn=yes:2
  set termguicolors
else
  set foldcolumn=1
  set signcolumn=yes
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif

" show invisible chars
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

runtime! *.vimrc

" finish on vim-tiny
if !1 | finish | endif

call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

syntax on

" highlight
try
  packadd! everforest
  " GitGutter highlights will be cleared if color directly
  autocmd VimEnter * color everforest

  "packadd! nightfox.nvim
  "color nordfox
  "
  "packadd! kanagawa.nvim
  "color kanagawa-dragon
catch
  color desert
  hi SignColumn ctermbg=black
  hi GitGutterAdd ctermfg=green guifg=green
  hi GitGutterChange ctermfg=yellow
  hi GitGutterDelete ctermfg=red
endtry
hi netrwMarkFile ctermbg=darkmagenta

" cursor shape
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

" load bash alias
let $BASH_ENV="$HOME/.dotfiles/.config/bash/.aliases"

" autocmd
"" if exists a session and loaded it: overwrite session
"" if exists a session but not loaded it: do not save new session
"" if exists no sessions: save new session
autocmd VimLeave * if $is_vim_session_loaded=='true' | mks! | else | mks | endif
autocmd SessionLoadPost * let $is_vim_session_loaded='true'
autocmd VimEnter * GitGutterLineNrHighlightsEnable

augroup Fold
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
augroup AutoOpenQuickFixWindow
  autocmd!
  autocmd QuickFixCmdPost * cw
augroup END
