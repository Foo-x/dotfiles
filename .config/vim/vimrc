let $XDG_CONFIG_HOME=get(environ(), 'XDG_CONFIG_HOME', $HOME . '/.config')
let $XDG_CACHE_HOME=get(environ(), 'XDG_CACHE_HOME', $HOME . '/.cache')
let $XDG_DATA_HOME=get(environ(), 'XDG_DATA_HOME', $HOME . '/.local/share')
let $XDG_STATE_HOME=get(environ(), 'XDG_STATE_HOME', $HOME . '/.local/state')

let g:loaded_matchit = 1

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

if !has('nvim')
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/bullets.vim
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/previm
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/fzf.vim
  set runtimepath+=~/.fzf
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/vim-fugitive
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/vim-rhubarb
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/gv.vim
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/vim-abolish
  set runtimepath+=$XDG_DATA_HOME/nvim/lazy/iceberg.vim
  color iceberg
endif

set backspace=indent,eol,start
set encoding=utf-8
set cindent
set shiftwidth=2
set tabstop=2
set expandtab
set noerrorbells
set visualbell t_vb=
set runtimepath+=$HOME/.vim
set noswapfile
set wildmenu
set wildmode=list:longest
set showtabline=2
set confirm
set hidden
set splitbelow
set splitright
set formatoptions+=M
set matchpairs+=<:>
set scrolloff=5
set sidescrolloff=10
set shortmess+=FI
set shortmess-=S
set mouse=
set updatetime=100
set diffopt+=algorithm:histogram,indent-heuristic
set spelllang=en,cjk
set helplang=en,ja
set errorformat+=%-G#q#%.%#
set errorformat+=%f%*[^[:fname:]]%l\ %m
set errorformat+=%f%*[^[:fname:]]%l
set errorformat+=%f
set errorformat+=%-G%.%#
set foldminlines=3
set nofoldenable
set autoread
set viminfo+='10000
set viminfo-='100
set foldmethod=indent
set background=dark
set noequalalways
set sessionoptions-=blank
set sessionoptions-=buffers
set sessionoptions-=help
if has('nvim')
  set foldexpr=nvim_treesitter#foldexpr()
  set foldcolumn=auto
  set signcolumn=yes:2
  set termguicolors
  set laststatus=3
else
  set foldcolumn=1
  set signcolumn=yes
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
  set laststatus=2
endif

if has('nvim-0.8')
  set exrc
endif

" show invisible chars
set listchars=tab:▸\ ,trail:·,nbsp:_,extends:»,precedes:«
set list

runtime! *.vimrc

call mkdir($XDG_DATA_HOME."/vim/spell", 'p')
set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p')

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p')
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p')
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p')

syntax on

" cursor shape
let &t_ti.="\e[1 q"
let &t_SI.="\e[5 q"
let &t_EI.="\e[1 q"
let &t_te.="\e[0 q"

" load bash alias
let $BASH_ENV="$HOME/.dotfiles/.config/bash/.aliases"

" autocmd
augroup SessionLoad
  autocmd!
  let g:save_session = v:false
  fun! s:session_load_post()
    if !g:save_session
      let g:save_session = v:true
      " save a session every 1 sec
      call timer_start(1 * 1000, { t -> execute('silent! mks!') }, { 'repeat': -1 })
    endif

    " clean diffview tabs and buffers
    let l:tabs = gettabinfo()
    for l:tab in l:tabs
      for l:winid in l:tab.windows
        if bufname(winbufnr(l:winid)) =~ '^diffview://'
          exe 'tabclose' l:tab.tabnr
          break
        endif
      endfor
    endfor
    for l:bufnr in range(1, bufnr('$'))
      if bufname(l:bufnr) =~ '^diffview://'
        exe 'bwipeout' l:bufnr
      endif
    endfor
  endf
  autocmd SessionLoadPost * call s:session_load_post()
augroup END

augroup Fold
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END
augroup AutoOpenQuickFixWindow
  autocmd!
  autocmd QuickFixCmdPost * cw
augroup END
augroup AutoRead
  autocmd!
  autocmd CursorHold * silent! checktime
augroup END
augroup CursorLine
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline
augroup END
augroup CmdWin
  autocmd!
  autocmd CmdwinEnter * setlocal nonumber
  autocmd CmdwinEnter * setlocal signcolumn=no
  autocmd CmdwinEnter : g/\v^q%[a!]$/d
  autocmd CmdwinEnter : g/\v^w%[qa!]$/d
  autocmd CmdWinEnter * nnoremap <buffer> q <Cmd>q<CR>
augroup END
augroup Memo
  autocmd!
  autocmd TabLeave .local/memo.md let g:memo_leave = v:true
  autocmd TabEnter * if get(g:, 'memo_leave', v:false) && tabpagenr('#') != 0 | exe 'tabclose' tabpagenr('#') | endif | let g:memo_leave = v:false
augroup END
augroup Kanbanmd
  autocmd!
  autocmd TabLeave $XDG_DATA_HOME/kanbanmd/*.md let g:kmd_leave = v:true
  autocmd BufRead,BufNewFile $XDG_DATA_HOME/kanbanmd/*.md nnoremap <buffer> <Space>k <Cmd>if getline('.') =~ '\~TODAY' \| s/ \~TODAY// \| else \| exe 'norm A ~TODAY' \| endif<CR>
  autocmd TabEnter * if get(g:, 'kmd_leave', v:false) && tabpagenr('#') != 0 | exe 'tabclose' tabpagenr('#') | endif | let g:kmd_leave = v:false
augroup END
augroup Jujutsu
  autocmd!
  autocmd FileType jj JujutsuDescribeTemplate
augroup END
