export DOT_DIR="${HOME}/.dotfiles"

export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_STATE_HOME="${HOME}/.local/state"

. ${DOT_DIR}/.config/bash/.exports_color

# directory
LS_COLORS="di=${__blue_ansi_foreground}"
# executable
LS_COLORS="ex=${__green_ansi_foreground}:${LS_COLORS}"
# pipe
LS_COLORS="pi=${__yellow_ansi_foreground}:${LS_COLORS}"
# link
LS_COLORS="ln=${__cyan_ansi_pccs_palep_foreground}:${LS_COLORS}"
# orphan link
LS_COLORS="or=9;${__red_ansi_foreground}:${LS_COLORS}"
# socket
LS_COLORS="so=${__red_ansi_pccs_deep_foreground}:${LS_COLORS}"
# setuid
LS_COLORS="su=30;${__red_ansi_background}:${LS_COLORS}"
# setgid
LS_COLORS="sg=30;${__yellow_ansi_background}:${LS_COLORS}"
# sticky and other writable directory
LS_COLORS="tw=30;${__green_ansi_background}:${LS_COLORS}"
# not sticky and other writable directory
LS_COLORS="ow=${__blue_ansi_pccs_deep_foreground};${__green_ansi_background}:${LS_COLORS}"
# ignored
LS_COLORS="*~=${__gy55_ansi_pccs_foreground}:${LS_COLORS}"
LS_COLORS="*.bak=${__gy55_ansi_pccs_foreground}:${LS_COLORS}"
LS_COLORS="*.tmp=${__gy55_ansi_pccs_foreground}:${LS_COLORS}"
export LS_COLORS

export HISTSIZE=100000
export HISTFILE=${XDG_STATE_HOME}/bash/history
export HISTFILESIZE=100000
export HISTTIMEFORMAT='%F %T '
export HISTCONTROL=ignorespace # not save commands that space-beginned and duplicated to history
export HISTIGNORE='?:??:pwd:history:cd*:exit:clear'

export PATH="${XDG_DATA_HOME}/mise/shims:$PATH"
export PATH="${XDG_CACHE_HOME}/.bun/bin:$PATH"

export EDITOR='nvim -p'
export SUDO_EDITOR='$(type -p nvim)'

export VIMINIT='let $MYVIMRC = has("nvim") ? "$XDG_CONFIG_HOME/nvim/init.lua" : "$XDG_CONFIG_HOME/vim/vimrc" | so $MYVIMRC'

export PAGER='less'
export LESS='RFMi'
export LESS_TERMCAP_mb=$'\E[1;31m'  # Begins blinking.
export LESS_TERMCAP_md=$'\E[36m'    # Begins bold.
export LESS_TERMCAP_so=$'\E[47;30m' # Begins standout-mode.
export LESS_TERMCAP_us=$'\E[1;36m'  # Begins underline.
export LESS_TERMCAP_me=$'\E[0m'     # Ends mode.
export LESS_TERMCAP_se=$'\E[0m'     # Ends standout-mode.
export LESS_TERMCAP_ue=$'\E[0m'     # Ends underline.

export GIT_PAGER=delta

if [[ "${WSL_DISTRO_NAME}" ]]; then
  export BROWSER=wslview
  if [[ $(uname -r) == *WSL2 ]]; then
    export WSL_VERSION=2
  else
    export WSL_VERSION=1
  fi
fi

export LANG=C
LOCALE_LIST="$(locale -a)"
if [[ "${LOCALE_LIST}" =~ C.UTF-8|C.utf8 ]]; then
  export LC_CTYPE='C.UTF-8'
fi

case $- in
*i*)
  stty start ''
  stty stop ''
  ;;
esac

export FZF_DEFAULT_OPTS='--reverse --cycle --bind "change:top" -0'
export FZF_DEFAULT_COMMAND="fd --hidden -tf -tl | sort"

export RIPGREP_CONFIG_PATH="${XDG_CONFIG_HOME}/ripgrep/ripgreprc"

# exec commands after each commands
function dispatch_prompt_command() {
  local f
  for f in ${!PROMPT_COMMAND_*}; do
    eval "${!f}"
  done
}
export PROMPT_COMMAND='dispatch_prompt_command'

function __histsave() {
  history -a
  history -c
  history -r
}

export PROMPT_COMMAND_HISTSAVE='__histsave'

function lsgit() {
  ls -A
  if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = "true" ]; then
    echo
    git status -sb
  fi
}

function lsgit_cd() {
  if [ "${LSGIT_DIR:-${PWD}}" != "${PWD}" ]; then
    lsgit
  fi
  LSGIT_DIR=${PWD}
}
export PROMPT_COMMAND_LSGIT_CD='lsgit_cd'

trap '((cmdcnt++))' DEBUG
function lsgit_enter() {
  local splitted_prompts oldifs
  oldifs=$IFS
  IFS=';' splitted_prompts=(${PROMPT_COMMAND})
  IFS=$oldifs

  if [ $((lsgit_enter_cnt + ${#splitted_prompts[@]})) = ${cmdcnt} ]; then
    lsgit
  fi

  lsgit_enter_cnt=${cmdcnt}
}
export PROMPT_COMMAND_LSGIT_ENTER='lsgit_enter'

# prompt
. ${DOT_DIR}/.config/bash/.exports_git_ps1

export PS1="\$(exit=\$?; printf '%s' \"\n\$([ \j -gt 0 ] && printf '\[\e[${__blue_ansi_pccs_bright_foreground}m\]& ')\$([ \"\$LOCAL_PS1\" ] && printf '\[\e[${__blue_ansi_pccs_lightp_foreground}m\]$LOCAL_PS1|' )\$([ \"\$SSH_CONNECTION\" ] || \grep -q 'docker\|lxc' /proc/1/cgroup && printf '\[\e[4;${__blue_ansi_pccs_lightp_foreground}m\]\u@\h\[\e[m\]' || printf '\[\e[${__blue_ansi_pccs_lightp_foreground}m\]\u' ) \[\e[${__blue_ansi_pccs_palep_foreground}m\]\w\[\e[${__gy65_ansi_pccs_foreground}m\]\$(__git_ps1 \" %s\")\n\$([ \$exit = \"0\" ] && printf \"\[\e[${__blue_ansi_pccs_lightp_foreground}m\]\" || printf \"\[\e[${__gy65_ansi_pccs_foreground}m\]\")\\$\[\e[m\] \")"

# vim: ft=sh
