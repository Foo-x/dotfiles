{
  "allow": {
    "scope": "rust",
    "prefix": "allow",
    "body": [
      "#[allow(${1|unused_imports,dead_code,unused_variables,non_snake_case|})]$0"
    ],
    "description": "Insert allow"
  },
  "as": {
    "scope": "rust",
    "prefix": "as",
    "body": [
      "as ${1|u8,u16,u32,u64,u128,i8,i16,i32,i64,i128,usize,isize|}$0"
    ],
    "description": "Casting between types"
  },
  "assert": {
    "scope": "rust",
    "prefix": "assert",
    "body": [
      "assert!($1);$0"
    ],
    "description": "Insert assert macro"
  },
  "assert_eq": {
    "scope": "rust",
    "prefix": "assert_eq",
    "body": [
      "assert_eq!($1, $2);$0"
    ],
    "description": "Insert assert equal macro"
  },
  "cfg": {
    "scope": "rust",
    "prefix": "cfg",
    "body": [
      "#[cfg($1)]$0"
    ],
    "description": "Insert cfg attribute"
  },
  "closure": {
    "scope": "rust",
    "prefix": "closure",
    "body": [
      "|$1| {",
      "\t$2",
      "}$0"
    ],
    "description": "Insert closure"
  },
  "const": {
    "scope": "rust",
    "prefix": "const",
    "body": [
      "const $1: $2 = $3;$0"
    ],
    "description": "Insert constant variable"
  },
  "derive": {
    "scope": "rust",
    "prefix": "derive",
    "body": [
      "#[derive(${1|Debug,Copy,Clone,Default,Eq,Hash,Ord,PartialEq,PartialOrd|})]$0"
    ],
    "description": "Insert derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd) attribute"
  },
  "else if": {
    "scope": "rust",
    "prefix": "elif",
    "body": [
      "else if ${1:condition} {",
      "\t$2",
      "}$0"
    ],
    "description": "Insert else if"
  },
  "else": {
    "scope": "rust",
    "prefix": "else",
    "body": [
      "else {",
      "\t$1",
      "}$0"
    ],
    "description": "Insert else"
  },
  "enum": {
    "scope": "rust",
    "prefix": "enum",
    "body": [
      "enum ${1:Name} {",
      "\t${2:Value0},",
      "\t${3:Value1},$0",
      "}"
    ],
    "description": "Insert enumeration"
  },
  "err": {
    "scope": "rust",
    "prefix": "Err",
    "body": [
      "Err($1)$0"
    ],
    "description": "Insert error variant"
  },
  "feature": {
    "scope": "rust",
    "prefix": "feature",
    "body": "#![feature(${1:feature_name})]$0",
    "description": "Insert feature"
  },
  "fn": {
    "scope": "rust",
    "prefix": "fn",
    "body": [
      "fn ${1:fn_name}(${2:arg}) ${3:-> ${4:return_type} }{",
      "\t$0",
      "}"
    ],
    "description": "Insert function"
  },
  "for": {
    "scope": "rust",
    "prefix": "for",
    "body": [
      "for ${1:element} in ${2:range} {",
      "\t$0",
      "}"
    ],
    "description": "Insert for loop"
  },
  "format": {
    "scope": "rust",
    "prefix": "format",
    "body": [
      "format!(\"${1:{${2|:?,}{|}\\}}\", $3)${4|;,\\,|}$0"
    ],
    "description": "Insert format macro"
  },
  "if": {
    "scope": "rust",
    "prefix": "if",
    "body": [
      "if ${1:condition} {",
      "\t$2",
      "}$0"
    ],
    "description": "Insert if"
  },
  "if let": {
    "scope": "rust",
    "prefix": "if let",
    "body": [
      "if let ${1:param} = ${2:compare_to_param} {",
      "\t$0",
      "}"
    ],
    "description": "Insert if let"
  },
  "impl": {
    "scope": "rust",
    "prefix": "impl",
    "body": [
      "impl ${1:TraitName} ${2:for ${3:Type} }{",
      "\t$0",
      "}"
    ],
    "description": "Implement generics"
  },
  "let statement": {
    "scope": "rust",
    "prefix": "let",
    "body": [
      "let $1 = $2;"
    ],
    "description": "Insert variable"
  },
  "let mut statement": {
    "scope": "rust",
    "prefix": [
      "lm",
      "lem",
      "let mut"
    ],
    "body": [
      "let mut $1 = $2;"
    ],
    "description": "Insert mutable variable"
  },
  "loop": {
    "scope": "rust",
    "prefix": "loop",
    "body": [
      "loop {",
      "\t$0",
      "}"
    ],
    "description": "Insert infinite loop"
  },
  "macro_rules": {
    "scope": "rust",
    "prefix": "macro_rules",
    "body": [
      "macro_rules! ${1:macro_name} {",
      "\t(${2:captures}) => {",
      "\t\t$0",
      "\t};",
      "}"
    ],
    "description": "Insert macro rules"
  },
  "macro_use": {
    "scope": "rust",
    "prefix": "macro_use",
    "body": [
      "#[macro_use]$0"
    ],
    "description": "Insert macro_use"
  },
  "main": {
    "scope": "rust",
    "prefix": "main",
    "body": [
      "fn main() $0"
    ],
    "description": "Insert main function"
  },
  "match": {
    "scope": "rust",
    "prefix": "match",
    "body": [
      "match $1 {",
      "\t$2 => $0",
      "}"
    ],
    "description": "Insert match"
  },
  "move closure": {
    "scope": "rust",
    "prefix": "move",
    "body": [
      "move |$1| {",
      "\t$0",
      "}"
    ],
    "description": "Insert move closure"
  },
  "ok": {
    "scope": "rust",
    "prefix": "Ok",
    "body": [
      "Ok($1)$0"
    ],
    "description": "Insert ok variant"
  },
  "option": {
    "scope": "rust",
    "prefix": "Option",
    "body": [
      "Option<${1:T}>$0"
    ],
    "description": "Insert option"
  },
  "println": {
    "scope": "rust",
    "prefix": "println",
    "body": [
      "println!(\"${1:{${2|:?,}{|}\\}}\", $3)${4|;,\\,|}$0"
    ],
    "description": "Insert print line macro"
  },
  "result": {
    "scope": "rust",
    "prefix": "Result",
    "body": [
      "Result<${1:T}, ${2:E}>$0"
    ],
    "description": "Insert result"
  },
  "some": {
    "scope": "rust",
    "prefix": "some",
    "body": [
      "Some($1)$0"
    ],
    "description": "Insert some"
  },
  "static": {
    "scope": "rust",
    "prefix": "static",
    "body": [
      "static $1: $2 = $3;$0"
    ],
    "description": "Insert static variable"
  },
  "static ref": {
    "scope": "rust",
    "prefix": [
      "sr",
      "static ref"
    ],
    "body": [
      "static ref $1: $2 = $3;$0"
    ],
    "description": "Insert static ref"
  },
  "struct": {
    "scope": "rust",
    "prefix": "struct",
    "body": [
      "struct ${1:Name} {",
      "\t${2:label}: ${3:type},$0",
      "}"
    ],
    "description": "Insert structure"
  },
  "test": {
    "scope": "rust",
    "prefix": "test",
    "body": "#[test]",
    "description": "Insert test block"
  },
  "trait": {
    "scope": "rust",
    "prefix": "trait",
    "body": [
      "trait ${1:TraitName} {",
      "\t$0",
      "}"
    ]
  },
  "type": {
    "scope": "rust",
    "prefix": "type",
    "body": [
      "${1|u8,u16,u32,u64,u128,i8,i16,i32,i64,i128,usize,isize|}$0"
    ],
    "description": "Insert type"
  },
  "union": {
    "scope": "rust",
    "prefix": "union",
    "body": [
      "union ${1:Name} {",
      "\t$0",
      "}"
    ],
    "description": "Insert union"
  },
  "unsafe": {
    "scope": "rust",
    "prefix": "unsafe",
    "body": [
      "unsafe {",
      "\t$0",
      "}"
    ],
    "description": "Insert unsafe block"
  },
  "Vec": {
    "scope": "rust",
    "prefix": "Vec",
    "body": [
      "Vec${1:<${2|u8,u16,u32,u64,u128,i8,i16,i32,i64,i128,usize,isize|}>}$0"
    ],
    "description": "Insert vector constractor"
  },
  "vec!": {
    "scope": "rust",
    "prefix": "vec!",
    "body": [
      "vec![$1];$0"
    ],
    "description": "Insert vector macro"
  },
  "where": {
    "scope": "rust",
    "prefix": "where",
    "body": "where ${1:T}: ${2:TraitName}$0",
    "description": "Insert where"
  },
  "while": {
    "scope": "rust",
    "prefix": "while",
    "body": [
      "while ${1:condition} {",
      "\t$0",
      "}"
    ],
    "description": "Insert while loop"
  },
  "while let": {
    "scope": "rust",
    "prefix": "while let",
    "body": [
      "while let ${1:param} = ${2:compare_to_param} {",
      "\t$0",
      "}"
    ],
    "description": "Insert while let"
  }
}
